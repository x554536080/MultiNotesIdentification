package com.example.xds.multinotesidentification.model;


public class MusicalNote {

    private static String[] kName = new String[]{
            "	A	",
            "	A#	",
            "	B	",
            "	C	",
            "	C#	",
            "	D	",
            "	D#	",
            "	E	",
            "	F	",
            "	F#	",
            "	G	",
            "	G#	",
            "	A 2	",
            "	A# 2	",
            "	B 2	",
            "	C 2	",
            "	C# 2	",
            "	D 2	",
            "	D# 2	",
            "	E 2	",
            "	F 2	",
            "	F# 2	",
            "	G 2	",
            "	G# 2	",
            "	A 3	",
            "	A# 3	",
            "	B 3	",
            "	C 3	",
            "	C# 3	",
            "	D 3	",
            "	D# 3	",
            "	E 3	",
            "	F 3	",
            "	F# 3	",
            "	G 3	",
            "	G# 3	",
            "	A 3	",
            "	A# 4	",
            "	B 4	",
            "	C 4	",
            "	C# 4	",
            "	D 4	",
            "	D# 4	",
            "	E 4	",
            "	F 4	",
            "	F# 4	",
            "	G 4	",
            "	G# 4	",
            "	A 5	",
            "	A# 5	",
            "	B 5	",
            "	C 5	",
            "	C# 5	",
            "	D 5	",
            "	D# 5	",
            "	E 5	",
            "	F 5	",
            "	F# 5	",
            "	G 5	",
            "	G# 5	",
            "	A 6	",
            "	A# 6	",
            "	B 6	",
            "	C 6	",
            "	C# 6	",
            "	D 6	",
            "	D# 6	",
            "	E 6	",
            "	F 6	",
            "	F# 6	",
            "	G 6	",
            "	G# 6	",
            "	A 7	",
            "	A# 7	",
            "	B 7	",
            "	C 7	",
            "	C# 7	",
            "	D 7	",
            "	D# 7	",
            "	E 7	",
            "	F 7	",
            "	F# 7	",
            "	G 7	",
            "	G# 7	",
            "	A 8	",
            "	A# 8	",
            "	B 8	",
            "	C 8	"};
    private static double[] kFreq = new double[]{
            27.5,
            29.1,
            30.9,
            32.7,
            34.6,
            36.7,
            38.9,
            41.2,
            43.7,
            46.2,
            49.0,
            51.9,
            55.0,
            58.3,
            61.7,
            65.4,
            69.3,
            73.4,
            77.8,
            82.4,
            87.3,
            92.5,
            98.0,
            103.8,
            110.0,
            116.5,
            123.5,
            130.8,
            138.6,
            146.8,
            155.6,
            164.8,
            174.6,
            185.0,
            196.0,
            207.7,
            220.0,
            233.1,
            246.9,
            261.6,
            277.2,
            293.7,
            311.1,
            329.6,
            349.2,
            370.0,
            392.0,
            415.3,
            440.0,
            466.2,
            493.9,
            523.3,
            554.4,
            587.3,
            622.3,
            659.3,
            698.5,
            740.0,
            784.0,
            830.6,
            880.0,
            932.3,
            987.8,
            1046.5,
            1108.7,
            1174.7,
            1244.5,
            1318.5,
            1396.9,
            1480.0,
            1568.0,
            1661.2,
            1760.0,
            1864.7,
            1975.5,
            2093.0,
            2217.5,
            2349.3,
            2489.0,
            2637.0,
            2793.8,
            2960.0,
            3136.0,
            3322.4,
            3520.0,
            3729.3,
            3951.1,
            4186.0
    };

    public static double percentage;

    MusicalNote() {
    }

    public static String maxLocation(double freq) {

        //若超出范围
        if ((kFreq[0] > freq) || (freq > kFreq[87])) {
            return "超出范围";
        }

        for (int i = 1; i < 87; i++) {
            if (freq <= kFreq[i]) {
                double kLog = Math.log(freq / kFreq[i - 1]);
                percentage = 12 * kLog / Math.log(2);
                if (percentage > 0.5) {
                    percentage = percentage - 1;
                    return kName[i];
                } else return kName[i - 1];
            }
        }
        return "error";
    }

}
